/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/screen_music_screen/Screen_MusicViewBase.hpp>
#include <touchgfx/Color.hpp>
#include "BitmapDatabase.hpp"
#include <texts/TextKeysAndLanguages.hpp>

Screen_MusicViewBase::Screen_MusicViewBase() :
    buttonCallback(this, &Screen_MusicViewBase::buttonCallbackHandler),
    sliderValueChangedCallback(this, &Screen_MusicViewBase::sliderValueChangedCallbackHandler)
{

    __background.setPosition(0, 0, 480, 272);
    __background.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));

    scalableImage1.setBitmap(touchgfx::Bitmap(BITMAP_BACKGROUND2_ID));
    scalableImage1.setPosition(0, 0, 600, 444);
    scalableImage1.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);

    textArea1.setXY(182, 8);
    textArea1.setColor(touchgfx::Color::getColorFrom24BitRGB(57, 224, 23));
    textArea1.setLinespacing(0);
    textArea1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID36));

    buttonWithIconMusic_Home.setXY(420, 212);
    buttonWithIconMusic_Home.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID), touchgfx::Bitmap(BITMAP_BLUE_ICONS_HOME_32_ID), touchgfx::Bitmap(BITMAP_BLUE_ICONS_HOME_32_ID));
    buttonWithIconMusic_Home.setIconXY(15, 16);
    buttonWithIconMusic_Home.setAction(buttonCallback);
    buttonWithIconMusic_Home.setAlpha(200);

    box_Highlight1.setPosition(17, 71, 108, 130);
    box_Highlight1.setColor(touchgfx::Color::getColorFrom24BitRGB(196, 97, 42));

    boxProgress_Music.setXY(278, 181);
    boxProgress_Music.setProgressIndicatorPosition(2, 2, 180, 16);
    boxProgress_Music.setRange(0, 100);
    boxProgress_Music.setDirection(touchgfx::AbstractDirectionProgress::RIGHT);
    boxProgress_Music.setBackground(touchgfx::Bitmap(BITMAP_BLUE_PROGRESSINDICATORS_BG_MEDIUM_PROGRESS_INDICATOR_BG_SQUARE_0_DEGREES_ID));
    boxProgress_Music.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 151, 255));
    boxProgress_Music.setValue(60);

    box_Highlight2.setPosition(143, 71, 108, 130);
    box_Highlight2.setColor(touchgfx::Color::getColorFrom24BitRGB(66, 41, 184));

    buttonWithIcon_Play.setXY(340, 71);
    buttonWithIcon_Play.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID), touchgfx::Bitmap(BITMAP_BLUE_ICONS_PLAY_32_ID), touchgfx::Bitmap(BITMAP_BLUE_ICONS_PLAY_32_ID));
    buttonWithIcon_Play.setIconXY(20, 15);
    buttonWithIcon_Play.setAction(buttonCallback);

    buttonWithIcon_Pause.setXY(278, 71);
    buttonWithIcon_Pause.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID), touchgfx::Bitmap(BITMAP_BLUE_ICONS_PAUSE_32_ID), touchgfx::Bitmap(BITMAP_BLUE_ICONS_PAUSE_32_ID));
    buttonWithIcon_Pause.setIconXY(18, 15);
    buttonWithIcon_Pause.setAction(buttonCallback);

    buttonWithIcon_Stop.setXY(400, 71);
    buttonWithIcon_Stop.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID), touchgfx::Bitmap(BITMAP_BLUE_ICONS_STOP_32_ID), touchgfx::Bitmap(BITMAP_BLUE_ICONS_STOP_32_ID));
    buttonWithIcon_Stop.setIconXY(15, 15);
    buttonWithIcon_Stop.setAction(buttonCallback);

    slider_Volume.setXY(151, 225);
    slider_Volume.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_SLIDER_HORIZONTAL_SMALL_SLIDER_HORIZONTAL_SMALL_ROUND_EDGE_BACK_ID), touchgfx::Bitmap(BITMAP_BLUE_SLIDER_HORIZONTAL_SMALL_SLIDER_HORIZONTAL_SMALL_ROUND_EDGE_FILL_ID), touchgfx::Bitmap(BITMAP_BLUE_SLIDER_HORIZONTAL_SMALL_INDICATORS_SLIDER_HORIZONTAL_SMALL_ROUND_EDGE_KNOB_ID));
    slider_Volume.setupHorizontalSlider(3, 7, 0, 0, 125);
    slider_Volume.setValueRange(0, 100);
    slider_Volume.setValue(0);
    slider_Volume.setNewValueCallback(sliderValueChangedCallback);

    add(__background);
    add(scalableImage1);
    add(textArea1);
    add(buttonWithIconMusic_Home);
    add(box_Highlight1);
    add(boxProgress_Music);
    add(box_Highlight2);
    add(buttonWithIcon_Play);
    add(buttonWithIcon_Pause);
    add(buttonWithIcon_Stop);
    add(slider_Volume);
}

void Screen_MusicViewBase::setupScreen()
{

}

//Called when the screen transition ends
void Screen_MusicViewBase::afterTransition()
{
    //Interaction1
    //When screen transition ends call virtual function
    //Call updateScreen_Music
    updateScreen_Music();
}

void Screen_MusicViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &buttonWithIconMusic_Home)
    {
        //Interaction2
        //When buttonWithIconMusic_Home clicked change screen to Screen_MainMenu
        //Go to Screen_MainMenu with screen transition towards West
        application().gotoScreen_MainMenuScreenSlideTransitionWest();
    }
    else if (&src == &buttonWithIcon_Play)
    {
        //Interaction4
        //When buttonWithIcon_Play clicked call virtual function
        //Call musicPlay
        musicPlay();
    }
    else if (&src == &buttonWithIcon_Pause)
    {
        //Interaction3
        //When buttonWithIcon_Pause clicked call virtual function
        //Call musicPause
        musicPause();
    }
    else if (&src == &buttonWithIcon_Stop)
    {
        //Interaction5
        //When buttonWithIcon_Stop clicked call virtual function
        //Call musicStop
        musicStop();
    }
}

void Screen_MusicViewBase::sliderValueChangedCallbackHandler(const touchgfx::Slider& src, int value)
{
    if (&src == &slider_Volume)
    {
        //Interaction6
        //When slider_Volume value changed call virtual function
        //Call musicVolume
        musicVolume(value);
    }
}
